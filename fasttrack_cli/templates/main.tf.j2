# ---------------------------------------------------------------------------------------------------------------------
# {{ project_name }} Infrastructure - Azure Resources
# Generated by Fasttrack Terraform CLI
# ---------------------------------------------------------------------------------------------------------------------

terraform {
  required_providers {
    azuread = {
      source  = "hashicorp/azuread"
      version = "~> 2.0"
    }
    time = {
      source  = "hashicorp/time"
      version = "~> 0.9"
    }
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
  }
}

# Configure the Azure Provider
provider "azurerm" {
  features {}

  # Use Azure CLI authentication
  use_cli = true

  # Skip provider registration to speed up apply
  skip_provider_registration = true
}

# ---------------------------------------------------------------------------------------------------------------------
# Resource Group
# ---------------------------------------------------------------------------------------------------------------------

resource "azurerm_resource_group" "main" {
  name     = var.resource_group_name
  location = var.location

  tags = {
    environment = var.environment
    project     = var.project_name
    managed_by  = "terraform"
    created_by  = "fasttrack-cli"
  }

  lifecycle {
    ignore_changes = [tags]
  }
}

{% if create_app_registration %}
# ---------------------------------------------------------------------------------------------------------------------
# Azure AD Application Registration
# ---------------------------------------------------------------------------------------------------------------------

resource "azuread_application" "app" {
  display_name            = var.azuread_app_name
  owners                  = [data.azuread_client_config.current.object_id]
  sign_in_audience        = "AzureADMyOrg"
  group_membership_claims = ["ApplicationGroup"]

  web {
    redirect_uris = [var.redirect_url]

    implicit_grant {
      access_token_issuance_enabled = false
      id_token_issuance_enabled     = true
    }
  }

  api {
    mapped_claims_enabled          = false
    requested_access_token_version = 2
  }

  # Configure API permissions for Microsoft Graph
  required_resource_access {
    resource_app_id = "00000003-0000-0000-c000-000000000000" # Microsoft Graph

    # User.Read permission
    resource_access {
      id   = "e1fe6dd8-ba31-4d61-89e7-88639da4683d"
      type = "Scope"
    }

    # GroupMember.Read.All permission
    resource_access {
      id   = "bc024368-1153-4739-b217-4326f2e966d0"
      type = "Scope"
    }
  }
}

resource "azuread_service_principal" "app" {
  client_id = azuread_application.app.client_id
  owners    = [data.azuread_client_config.current.object_id]
}

resource "time_rotating" "client_secret" {
  count           = 1
  rotation_months = {{ secret_rotation_months }}
  lifecycle {
    create_before_destroy = true
  }
}

resource "azuread_application_password" "client_secret" {
  application_id = azuread_application.app.id
  count                 = 1
  display_name          = "{{ secret_display_name }}"
  rotate_when_changed = {
    rotation = time_rotating.client_secret[0].id
  }
  lifecycle {
    create_before_destroy = true
  }
}
{% endif %}

{% if create_storage %}
# ---------------------------------------------------------------------------------------------------------------------
# Storage Account and Container Configuration
# ---------------------------------------------------------------------------------------------------------------------

{% if use_existing_storage %}
# Use existing storage account
# NOTE: This storage account must already exist before running terraform apply
data "azurerm_storage_account" "existing" {
  name                = var.storage_account_name
  resource_group_name = var.resource_group_name

  depends_on = [azurerm_resource_group.main]
}
{% else %}
# Create new storage account
resource "azurerm_storage_account" "main" {
  name                     = var.storage_account_name
  resource_group_name      = azurerm_resource_group.main.name
  location                 = azurerm_resource_group.main.location
  account_tier             = "{{ storage_tier }}"
  account_replication_type = "{{ storage_replication }}"

  # Security settings
  min_tls_version                 = "TLS1_2"
  https_traffic_only_enabled      = true
  allow_nested_items_to_be_public = false

  tags = {
    environment = var.environment
    project     = var.project_name
    managed_by  = "terraform"
    created_by  = "fasttrack-cli"
  }

  lifecycle {
    ignore_changes = [tags]
  }
}
{% endif %}

{% if storage_containers %}
# Create storage containers
{% for container in storage_containers %}
resource "azurerm_storage_container" "container_{{ loop.index }}" {
  name                  = "{{ container }}"
  storage_account_name  = {% if use_existing_storage %}data.azurerm_storage_account.existing.name{% else %}azurerm_storage_account.main.name{% endif %}

  container_access_type = "private"

  metadata = {
    environment = var.environment
    project     = var.project_name
    created_by  = "terraform"
  }

  lifecycle {
    ignore_changes = [metadata]
  }
}
{% endfor %}
{% endif %}
{% endif %}
